# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Runs all the tests"
  lane :test do
    scan(
      scheme: "ApplicationCoordinator",
      code_coverage: true
    )
  end

  desc "Runs coverage"
  lane :coverage do
    output_directory = 'fastlane/test_output'
    test
    slather(
      travis: true,
      scheme: "ApplicationCoordinator",
      # coveralls: true, # coveralls
      cobertura_xml: true, # sonar scanner
      output_directory: output_directory, # required for cobertura_xml, defaults to project root
      proj: "ApplicationCoordinator.xcodeproj"
    )
  end

  desc "Sonar scan"
  lane :sonar_scan do
    project_key = 'ApplicationCoordinator'
    project_name = 'Application Coordinator'
    project_version = '1.0'
    project_language = 'swift'

    runner_arguments = []
    runner_arguments << map_sonar_url(options)
    runner_arguments << '-Dsonar.password=""'
    runner_arguments << '-Dsonar.verbose=true'
    # runner_arguments << '-Dsonar.swift.swiftlint.report=fastlane/test_output/*swiftlint.txt'
    runner_arguments << '-Dsonar.swift.coverage.reportPattern=fastlane/test_output/cobertura.xml'
    # runner_arguments << '-Dsonar.swift.lizard.report=fastlane/test_output/lizard-report.xml'
    runner_arguments << '-Dsonar.junit.reportsPath=fastlane/test_output/'
    runner_arguments << '-Dsonar.junit.include=fastlane/test_output/*.junit'
    # runner_arguments << '-Dsonar.coverage.exclusions=**/Models/**/*,**/External/**/*,**/Constants/**/*,**/Startup/**/*,**Store.swift'

    sonar(
      project_key: project_key,
      project_name: project_name,
      project_version: project_version,
      project_language: project_language,
      sources_path: File.expand_path("../ApplicationCoordinator"),
      source_encoding: 'UTF-8',
      sonar_runner_args: runner_arguments.join(' '),
      sonar_login: ENV["SONAR_TOKEN"]
    )
  end
end
